org: artemsopa
app: aws-image-uploader
service: aws-image-uploader
frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    binaryMediaTypes:
      - "multipart/form-data"
  environment:
    TABLE_NAME: ${self:custom.tableName}
    BUCKET_NAME: ${self:custom.bucketName}
    PASSWORD_SALT: 3
    USER_POOL_ID: { Ref: UserPool }
    USER_CLIENT_ID: { Ref: UserClient }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"

        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            {
              "Fn::Join":
                [
                  "arn:aws:s3:::${self:custom.bucketName}",
                  ["arn:aws:s3:::${self:custom.bucketName}", "/*"],
                ],
            }

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}/index/*"

custom:
  tableName: img-upldr-table-${self:provider.stage}
  bucketName: img-upldr-bucket-${self:provider.stage}
  userPoolName: img-upldr-user-pool-${self:provider.stage}
  userClientName: img-upldr-user-pool-client-${self:provider.stage}

functions:
  signIn:
    handler: ./src/index.signIn
    events:
      - http:
          path: /auth/sign-in
          method: post
          cors: true
  signUp:
    handler: ./src/index.signUp
    events:
      - http:
          path: /auth/sign-up
          method: post
          cors: true
  getAllImages:
    handler: ./src/index.getAllImages
    events:
      - http:
          path: /bucket
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  uploadImage:
    handler: ./src/index.uploadImage
    events:
      - http:
          path: /bucket
          method: post
          cors: true
  deleteImage:
    handler: ./src/index.deleteImage
    events:
      - http:
          path: /bucket/{title}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                title: true

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userClientName}
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    UploaderBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - DELETE
              MaxAge: 3000

    UploaderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
        BillingMode: PAY_PER_REQUEST
